#!/bin/sh
# Main portion of SmackMe Installer for HP TouchPad.
# Will Castro <castrwilliam at gmail>

export PATH=/usr/sbin:/usr/bin:/sbin:/bin:/boot/usr/sbin

error() {
	echo "Error detected, bailing out..." >&2	
	cd /
	sync	
	umount -a
	sync
	sleep 10
	reboot
}

echo 3 > /proc/sys/kernel/printk
echo '**** SmackMe version 2.0 ****'
echo

for script in /etc/scripts/*.sh; do
	echo "Sourcing: $script ..."
	source $script
done

mkdir -p /mnt
mount -t tmpfs none /tmp

echo "Mounting boot partition"
mkdir -p /boot
mount -t ext3 /dev/mmcblk0p13 /boot 2>&1 >/dev/null

export LVM_SYSTEM_DIR=/boot/etc/lvm
lvm.static vgchange -ay 2>&1 >/dev/null

echo "Mounting media LV" 
mkdir /media
mount -t vfat /dev/store/media /media 2>&1 >/dev/null

if [ ! -d /media/sminstall ]
then 
	echo >&2
	echo "You should've created a directory under your media volume called"
	echo "'sminstall', and put (at a minimum) one ZIP file with your chosen"
	echo "Android operating system. I'm making it for you. Fill it. Exiting."
	mkdir /media/sminstall
	error
fi

# I hate random stuff cluttering up my screen.
mkdir -p /media/sminstall/log
exec > /tmp/log

echo "Mounting webOS root" >&2
mkdir /webos
mount -t ext3 /dev/store/root /webos

echo >&2
echo "***" >&2
echo "New Install on:" >&2
date >&2
echo "***" >&2


mkdir -p /media/sminstall/invalid
mkdir -p /media/sminstall/kern/orig
mkdir -p /media/sminstall/kern/modded

[ -f /media/sminstall/debugmode ] || export SM_DEBUG=$(cat /media/sminstall/debugmode)

if [ ! -z "$SM_DEBUG" ]; then
	echo "Debug mode enabled..." >&2
	mv /media/sminstall/finished/* /media/sminstall/
fi

echo "" >&2

NTRIES=1

if [ -e /dev/store/cm-system -a -z "$SM_DEBUG" ]; then
	echo "Android is already installed in the ACME installer way." >&2
	echo "Back it up and run the ACME uninstaller, then re-run this SmackMe installer." >&2
	error
fi

rm -f /boot/uImage.ClockworkMod
rm -f /boot/uImage.TWRP
rm -f /boot/update-uimage

echo "Phase One: Determining media partition shrinkage" >&2
shrinkage=0
for infile in /media/sminstall/*; do
	addsize=0
	need_bootext=1;
	
	bname="`basename $infile`"
	# assign a volume to check (not necessarily the only one that is created)
	# and also a total size of the volumes that would need to be created.
	case $bname in
		TouchPadBuntuRootfs*.tar.gz|TouchPadBuntuRootfs*.tgz )
			addsize=3072
			lvname=ubuntu-root
			;;
		ArchLinuxARM-touchpad-latest.tar.gz|ArchLinuxARM-touchpad-latest.tgz )
			addsize=3072
			lvname=arch-root
			;;
		bodhi-touchpad-*.tar.gz|bodhi-touchpad-*.tgz )
			addsize=2048
			luvname=debian-root
			;;
		HPTPFedora*.tar.gz|HPTPFedora*.tar.gz )
			addsize=2560
			lvname=fedora-root
			;;
		HPTPSlack*.tar.gz|HPTPSlack*.tgz )
			addsize=2048
			lvname=slackware-root
			;;
		Froyo-*.zip|froyo-*.zip )
			addsize=800
			lvname=android22-system
			;;
		update-cm-7*.zip|update-cm7*.zip|cm-7*.zip )
			addsize=1000
			lvname=android23-system
			;; 
		update-cm-9*.zip|cm-9*.zip|update-cm9*.zip )
			addsize=1250
			lvname=android40-system
			;; 
		cm-10*.zip|update-cm-10*.zip|update-cm10*.zip )
			addsize=1400
			lvname=android41-system
			;; 
		Evervolv-*.zip|evervolv-*.zip )
			addsize=1400
			lvname=android42-system
			;; 
	esac
	# check for the mentioned volume.
	[ -e /dev/store/$lvname ] || shrinkage=$(($shrinkage + $addsize))
done

echo "shrinkage = ${shrinkage}MiB" >&2
echo >&2

cursize=$(lvm.static lvdisplay -c store/media | awk -F: '{print $7/2048}')
echo "cursize = ${cursize}M" >&2

# Make sure to leave safety room.
newsize=$(($cursize - $shrinkage - 8))
if [ $newsize -lt 0 ]
then
	echo "You don't have enough space on your internal flash to install" >&2
	echo "these OSes!" >&2
	echo "Note that this doesn't mean 'delete files', this means to get" >&2
	echo "a bigger TouchPad. Software can't help." >&2
	error
fi
echo "newsize = ${newsize}M" >&2

echo "unmounting media" >&2
umount /media

if [ ! -z "$SM_DEBUG" ]; then
	echo -n "shrinking media filesystem: " >&2
	LD_LIBRARY_PATH=/webos/usr/lib /webos/bin/resizefat /dev/store/media ${NEWSIZE}M 
	if [ $? -gt 0 ]
	then
		echo "Failed to shrink the FAT filesystem." >&2
		echo "You might have too much data stored on it." >&2
		error
	fi
	echo "OK" >&2

	echo -n "shrinking media logical volume: " >&2
	lvm.static lvresize -fL ${NEWSIZE}M  /dev/store/media 
	if [ $? -gt 0 ]
	then
		echo "Failed to shrink the logical volume." >&2
		umount -a
		sleep 15
		rebootzimage
	fi
	echo "OK" >&2
fi

echo -n "remounting media partition: " &>2
mount -t vfat /dev/store/media /media
echo "OK" >&2

files=$(ls -p /media/sminstall/* 2> /dev/null | sed -e /log$/d -e /debugmode$/d | grep -cv '/$' )

echo "$files files found." >&2
echo >&2

while [ "$files" -gt 0 ]; do
	if [ $NTRIES -gt 3 ]; then
		echo "BUG - Breaking out of seemingly infinite file loop." >&2
		error
	fi

	for infile in /media/sminstall/*; do
		bname="`basename $infile`"

		[ -d $infile -o $bname = "debugmode" ] && continue
	
		echo "file: $bname" >&2

		# Classify the file, to find out what we need to do.
		if [ ! -z "$SM_DEBUG" ]; then
			valid=1

			case $bname in
			TouchPadBuntuRootfs*.tar.gz|TouchPadBuntuRootfs*.tgz ) install_native $infile ubuntu 3072 ;;
			ArchLinuxARM-touchpad*.tar.gz|ArchLinuxARM-touchpad*.tgz ) install_native $infile arch 3072 ;;
			bodhi-touchpad-*.tar.gz|bodhi-touchpad-*.tgz ) install_native $infile debian 2048 ;;
			HPTPFedora*.tar.gz|HPTPFedora*.tar.gz ) install_native $infile fedora 2560 ;;
			HPTPSlackware*.tar.gz|HPTPSlackware*.tar.gz ) install_native $infile slackware 2048 ;;

			kexec-*.tar ) install_kexec $infile ;;
			uImage.* ) install_uimage $infile ;;

			Froyo-*.zip|froyo-*.zip ) install_android $infile android22 250 450 200 ;;
			update-cm-7*.zip|update-cm7*.zip|cm-7*.zip ) install_android $infile android23 300 500 200 ;; 
			update-cm-9*.zip|cm-9*.zip|update-cm9*.zip ) install_android $infile android40 300 750 200 ;; 
			cm-10*.zip|update-cm-10*.zip|update-cm10*.zip ) install_android $infile android41 450 750 200 ;; 
			Evervolv-*.zip|evervolv-*.zip ) install_android $infile android42 450 750 200 ;; 

			gapps-mdpi*.zip ) install_gapps $infile froyo ;;
			gapps-gb*.zip ) install_gapps $infile cm7 ;;
			gapps-ics*.zip ) install_gapps $infile cm9 ;;
			gapps-jb-20120*.zip|gapps-jb-201210*.zip ) install_gapps $infile cm10 ;;
			gapps-jb-*.zip ) install_gapps $infile jbmr1 ;;

			moboot*.zip ) install_moboot $infile ;;

			update-cwm*.zip|openrecovery*.zip )
				echo "$BNAME is a ZIP file containing Android recovery. I'm not dealing with that." >&2
				echo "In fact, CWM/TWRP won't work with multibooted Android installs." >&2
				echo "Always use SmackMe to install OSes in a multi-boot environment." >&2
				echo "Moving it to the invalid directory." >&2
				mv $infile /media/sminstall/invalid	
				continue
				;;
			* )
				valid=0
				;;
			esac
		fi

		if [ $? -ne 3 ]; then		
			mkdir -p /media/sminstall/finished
			if [ ! -z "$valid" ]; then
				echo "moving to finished directory" >&2
				mv $infile /media/sminstall/finished
			fi
		elif [ $? -gt 0 ]; then
			error
		fi
		[ -z "$SM_DEBUG" ] && sleep 3
	done # each file.

	# To prevent "infinite file loops" b/c debug mode doesn't move files to
	# finished dir.
	[ -z "$SM_DEBUG" ] && break

	files=$(ls -p /media/sminstall/* 2> /dev/null | sed -e /log$/d -e /debugmode$/d | grep -cv '/$' )
	[ "$files" != "0" ] && NTRIES=$((NTRIES + 1))
	echo "$files files remaining" >&2
done # as long as there are files.
 
rm -f /boot/uImage.ClockworkMod*
rm -f /boot/uImage.TWRP*
rm -f /boot/update-uimage

exec 1>&-

[ -e /media/sminstall/log/main ] && mv /media/sminstall/log/main /media/sminstall/log/old

cp /tmp/log /media/sminstall/log

sync
umount -a
sync
sync

echo "Finished." >&2
[ -z "$SM_DEBUG" ] && sleep 5
sleep 5

echo "Rebooting." >&2
reboot

